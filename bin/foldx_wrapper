#!/usr/bin/env python3

"""
Script to run the wrapper from the command line
"""

import argparse
from pathlib import Path

from FoldX.FoldX_ibex import FoldXIbex

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    def validate_file(input:str) -> bool:
        """
        Validate that the input is an existing file

        Args:
            input (str): Input file

        Returns:
            bool
        """
        inp = Path(input)
        if not inp.is_file():
            raise ValueError

        return inp

    parser = argparse.ArgumentParser(description='''Takes a PDB file and one or 
        more amino acid mutations'''.replace('\n',''))

    parser.add_argument("--input", help='''PDB file to model the mutation.
        '''.replace('\n',''), type=validate_file, required=True)
    
    parser.add_argument("--mutations", help='''Mutations to model on the given 
        PDB file, in the format [from_aa][chain][number][to_aa], e.g. L675AP
        '''.replace('\n',''), nargs='+')
    
    parser.add_argument("-d", "--destination", default=Path.cwd()/'foldx',
        help='''Path for saving the resulting energies in pickle format.
        '''.replace('\n',''))

    return parser.parse_args(args)


if __name__ == '__main__':

    args = parsing()
    pdb = args.input
    mutations = args.mutations

    chains = [mut[1] for mut in mutations]
    mutations = [mut[0]+mut[2:] for mut in mutations]

    out_dir = Path(args.destination)

    exe = FoldXIbex([pdb], [mutations], [chains], out_dir)
    exe.run()
